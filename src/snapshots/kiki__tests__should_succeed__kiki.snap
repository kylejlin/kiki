---
source: src/tests.rs
expression: rust_src
---
RustSrc(
    "// This code was generated by Kiki.\n// Kiki is an open-source minimalist parser generator for Rust.\n// You can read more at https://crates.io/crates/kiki\n//\n// This code was generated from a grammar with the following hash:\n// @sha256 79a758b6b021a6d22dd7aeecbb54844efa5042f0aff2e668e4364a4c1a27bec6\n\n#[derive(Debug)]\npub enum Token {\n    Underscore(crate::data::ByteIndex),\n    Ident(crate::data::token::Ident),\n    TerminalIdent(crate::data::token::TerminalIdent),\n    StartKw(crate::data::ByteIndex),\n    StructKw(crate::data::ByteIndex),\n    EnumKw(crate::data::ByteIndex),\n    TerminalKw(crate::data::ByteIndex),\n    Colon(crate::data::ByteIndex),\n    DoubleColon(crate::data::ByteIndex),\n    Comma(crate::data::ByteIndex),\n    LParen(crate::data::ByteIndex),\n    RParen(crate::data::ByteIndex),\n    LCurly(crate::data::ByteIndex),\n    RCurly(crate::data::ByteIndex),\n    LAngle(crate::data::ByteIndex),\n    RAngle(crate::data::ByteIndex),\n}\n\n#[derive(Clone, Debug)]\npub struct File {\n    pub items: Box<OptItems>,\n}\n\n#[derive(Clone, Debug)]\npub enum OptItems {\n    Nil,\n    Cons(\n        Box<OptItems>,\n        Box<FileItem>,\n    ),\n}\n\n#[derive(Clone, Debug)]\npub enum FileItem {\n    Start(\n        crate::data::token::Ident,\n    ),\n    Struct(\n        Box<Struct>,\n    ),\n    Enum(\n        Box<Enum>,\n    ),\n    Terminal(\n        Box<TerminalEnum>,\n    ),\n}\n\n#[derive(Clone, Debug)]\npub struct Struct {\n    pub name: crate::data::token::Ident,\n    pub fieldset: Box<Fieldset>,\n}\n\n#[derive(Clone, Debug)]\npub struct Enum {\n    pub name: crate::data::token::Ident,\n    pub variants: Box<OptEnumVariants>,\n}\n\n#[derive(Clone, Debug)]\npub struct TerminalEnum {\n    pub name: crate::data::token::Ident,\n    pub variants: Box<OptTerminalEnumVariants>,\n}\n\n#[derive(Clone, Debug)]\npub enum Fieldset {\n    Empty,\n    Named(\n        Box<NamedFieldset>,\n    ),\n    Tuple(\n        Box<TupleFieldset>,\n    ),\n}\n\n#[derive(Clone, Debug)]\npub struct NamedFieldset {\n    pub fields: Box<NamedFields>,\n}\n\n#[derive(Clone, Debug)]\npub enum NamedFields {\n    One(\n        Box<NamedField>,\n    ),\n    Cons(\n        Box<NamedFields>,\n        Box<NamedField>,\n    ),\n}\n\n#[derive(Clone, Debug)]\npub struct NamedField {\n    pub name: Box<IdentOrUnderscore>,\n    pub symbol: Box<IdentOrTerminalIdent>,\n}\n\n#[derive(Clone, Debug)]\npub struct TupleFieldset {\n    pub fields: Box<TupleFields>,\n}\n\n#[derive(Clone, Debug)]\npub enum TupleFields {\n    One(\n        Box<TupleField>,\n    ),\n    Cons(\n        Box<TupleFields>,\n        Box<TupleField>,\n    ),\n}\n\n#[derive(Clone, Debug)]\npub enum TupleField {\n    Used(\n        Box<IdentOrTerminalIdent>,\n    ),\n    Skipped(\n        Box<IdentOrTerminalIdent>,\n    ),\n}\n\n#[derive(Clone, Debug)]\npub enum OptEnumVariants {\n    Nil,\n    Cons(\n        Box<OptEnumVariants>,\n        Box<EnumVariant>,\n    ),\n}\n\n#[derive(Clone, Debug)]\npub struct EnumVariant {\n    pub name: crate::data::token::Ident,\n    pub fieldset: Box<Fieldset>,\n}\n\n#[derive(Clone, Debug)]\npub enum OptTerminalEnumVariants {\n    Nil,\n    Cons(\n        Box<OptTerminalEnumVariants>,\n        Box<TerminalEnumVariant>,\n    ),\n}\n\n#[derive(Clone, Debug)]\npub struct TerminalEnumVariant {\n    pub name: crate::data::token::TerminalIdent,\n    pub type_: Box<Type>,\n}\n\n#[derive(Clone, Debug)]\npub enum Type {\n    Unit(\n        \n    ),\n    Path(\n        Box<Path>,\n    ),\n    Complex(\n        Box<ComplexType>,\n    ),\n}\n\n#[derive(Clone, Debug)]\npub enum Path {\n    One(\n        crate::data::token::Ident,\n    ),\n    Cons(\n        Box<Path>,\n        crate::data::token::Ident,\n    ),\n}\n\n#[derive(Clone, Debug)]\npub struct ComplexType {\n    pub callee: Box<Type>,\n    pub args: Box<CommaSeparatedTypes>,\n}\n\n#[derive(Clone, Debug)]\npub enum CommaSeparatedTypes {\n    One(\n        Box<Type>,\n    ),\n    Cons(\n        Box<CommaSeparatedTypes>,\n        Box<Type>,\n    ),\n}\n\n#[derive(Clone, Debug)]\npub enum IdentOrUnderscore {\n    Ident(\n        crate::data::token::Ident,\n    ),\n    Underscore(\n        crate::data::ByteIndex,\n    ),\n}\n\n#[derive(Clone, Debug)]\npub enum IdentOrTerminalIdent {\n    Ident(\n        crate::data::token::Ident,\n    ),\n    Terminal(\n        crate::data::token::TerminalIdent,\n    ),\n}\n\n/// If the parser encounters an unexpected token `t`, it will return `Err(Some(t))`.\n/// If the parser encounters an unexpected end of input, it will return `Err(None)`.\npub fn parse<S>(src: S) -> Result<File, Option<Token>>\nwhere S: IntoIterator<Item = Token> {\n    let mut quasiterminals = src.into_iter()\n        .map(Quasiterminal::Terminal)\n        .chain(std::iter::once(Quasiterminal::Eof))\n        .peekable();\n    let mut states = vec![State::S0];\n    let mut nodes: Vec<Node> = vec![];\n    loop {\n        let top_state = *states.last().unwrap();\n        let next_quasiterminal_kind = QuasiterminalKind::from_quasiterminal(quasiterminals.peek().unwrap());\n        match get_action(top_state, next_quasiterminal_kind) {\n            Action::Shift(new_state) => {\n                states.push(new_state);\n                nodes.push(Node::from_terminal(quasiterminals.next().unwrap().try_into_terminal().unwrap()));\n            }\n\n            Action::Reduce(rule_kind) => {\n                let (new_node, new_node_kind) = pop_and_reduce(&mut states, &mut nodes, rule_kind);\n                nodes.push(new_node);\n                let temp_top_state = *states.last().unwrap();\n                let Some(new_state) = get_goto(temp_top_state, new_node_kind) else {\n                    return Err(quasiterminals.next().unwrap().try_into_terminal().ok());\n                };\n                states.push(new_state);\n            }\n\n            Action::Accept => {\n                return Ok(File::try_from(nodes.pop().unwrap()).unwrap());\n            }\n\n            Action::Err => {\n                return Err(quasiterminals.next().unwrap().try_into_terminal().ok());\n            }\n        }\n    }\n}\n\n#[derive(Debug)]\nenum Quasiterminal {\n    Terminal(Token),\n    Eof,\n}\n\n#[derive(Clone, Copy, Debug)]\nenum QuasiterminalKind {\n    Underscore = 0,\n    Ident = 1,\n    TerminalIdent = 2,\n    StartKw = 3,\n    StructKw = 4,\n    EnumKw = 5,\n    TerminalKw = 6,\n    Colon = 7,\n    DoubleColon = 8,\n    Comma = 9,\n    LParen = 10,\n    RParen = 11,\n    LCurly = 12,\n    RCurly = 13,\n    LAngle = 14,\n    RAngle = 15,\n    Eof = 16,\n}\n\n#[derive(Clone, Copy, Debug)]\nenum NonterminalKind {\n    File = 0,\n    OptItems = 1,\n    FileItem = 2,\n    Struct = 3,\n    Enum = 4,\n    TerminalEnum = 5,\n    Fieldset = 6,\n    NamedFieldset = 7,\n    NamedFields = 8,\n    NamedField = 9,\n    TupleFieldset = 10,\n    TupleFields = 11,\n    TupleField = 12,\n    OptEnumVariants = 13,\n    EnumVariant = 14,\n    OptTerminalEnumVariants = 15,\n    TerminalEnumVariant = 16,\n    Type = 17,\n    Path = 18,\n    ComplexType = 19,\n    CommaSeparatedTypes = 20,\n    IdentOrUnderscore = 21,\n    IdentOrTerminalIdent = 22,\n}\n\n#[derive(Clone, Copy, Debug)]\nenum State {\n    S0 = 0,\n    S1 = 1,\n    S2 = 2,\n    S3 = 3,\n    S4 = 4,\n    S5 = 5,\n    S6 = 6,\n    S7 = 7,\n    S8 = 8,\n    S9 = 9,\n    S10 = 10,\n    S11 = 11,\n    S12 = 12,\n    S13 = 13,\n    S14 = 14,\n    S15 = 15,\n    S16 = 16,\n    S17 = 17,\n    S18 = 18,\n    S19 = 19,\n    S20 = 20,\n    S21 = 21,\n    S22 = 22,\n    S23 = 23,\n    S24 = 24,\n    S25 = 25,\n    S26 = 26,\n    S27 = 27,\n    S28 = 28,\n    S29 = 29,\n    S30 = 30,\n    S31 = 31,\n    S32 = 32,\n    S33 = 33,\n    S34 = 34,\n    S35 = 35,\n    S36 = 36,\n    S37 = 37,\n    S38 = 38,\n    S39 = 39,\n    S40 = 40,\n    S41 = 41,\n    S42 = 42,\n    S43 = 43,\n    S44 = 44,\n    S45 = 45,\n    S46 = 46,\n    S47 = 47,\n    S48 = 48,\n    S49 = 49,\n    S50 = 50,\n    S51 = 51,\n    S52 = 52,\n    S53 = 53,\n    S54 = 54,\n    S55 = 55,\n    S56 = 56,\n    S57 = 57,\n    S58 = 58,\n    S59 = 59,\n    S60 = 60,\n    S61 = 61,\n    S62 = 62,\n    S63 = 63,\n    S64 = 64,\n}\n\n#[derive(Debug)]\nenum Node {\n    File(File),\n    OptItems(OptItems),\n    FileItem(FileItem),\n    Struct(Struct),\n    Enum(Enum),\n    TerminalEnum(TerminalEnum),\n    Fieldset(Fieldset),\n    NamedFieldset(NamedFieldset),\n    NamedFields(NamedFields),\n    NamedField(NamedField),\n    TupleFieldset(TupleFieldset),\n    TupleFields(TupleFields),\n    TupleField(TupleField),\n    OptEnumVariants(OptEnumVariants),\n    EnumVariant(EnumVariant),\n    OptTerminalEnumVariants(OptTerminalEnumVariants),\n    TerminalEnumVariant(TerminalEnumVariant),\n    Type(Type),\n    Path(Path),\n    ComplexType(ComplexType),\n    CommaSeparatedTypes(CommaSeparatedTypes),\n    IdentOrUnderscore(IdentOrUnderscore),\n    IdentOrTerminalIdent(IdentOrTerminalIdent),\n    Underscore(crate::data::ByteIndex),\n    Ident(crate::data::token::Ident),\n    TerminalIdent(crate::data::token::TerminalIdent),\n    StartKw(crate::data::ByteIndex),\n    StructKw(crate::data::ByteIndex),\n    EnumKw(crate::data::ByteIndex),\n    TerminalKw(crate::data::ByteIndex),\n    Colon(crate::data::ByteIndex),\n    DoubleColon(crate::data::ByteIndex),\n    Comma(crate::data::ByteIndex),\n    LParen(crate::data::ByteIndex),\n    RParen(crate::data::ByteIndex),\n    LCurly(crate::data::ByteIndex),\n    RCurly(crate::data::ByteIndex),\n    LAngle(crate::data::ByteIndex),\n    RAngle(crate::data::ByteIndex),\n}\n\n#[derive(Clone, Copy, Debug)]\nenum Action {\n    Shift(State),\n    Reduce(RuleKind),\n    Accept,\n    Err,\n}\n\n#[derive(Clone, Copy, Debug)]\nenum RuleKind {\n    R0 = 0,\n    R1 = 1,\n    R2 = 2,\n    R3 = 3,\n    R4 = 4,\n    R5 = 5,\n    R6 = 6,\n    R7 = 7,\n    R8 = 8,\n    R9 = 9,\n    R10 = 10,\n    R11 = 11,\n    R12 = 12,\n    R13 = 13,\n    R14 = 14,\n    R15 = 15,\n    R16 = 16,\n    R17 = 17,\n    R18 = 18,\n    R19 = 19,\n    R20 = 20,\n    R21 = 21,\n    R22 = 22,\n    R23 = 23,\n    R24 = 24,\n    R25 = 25,\n    R26 = 26,\n    R27 = 27,\n    R28 = 28,\n    R29 = 29,\n    R30 = 30,\n    R31 = 31,\n    R32 = 32,\n    R33 = 33,\n    R34 = 34,\n    R35 = 35,\n    R36 = 36,\n    R37 = 37,\n    R38 = 38,\n    R39 = 39,\n}\n\nfn pop_and_reduce(states: &mut Vec<State>, nodes: &mut Vec<Node>, rule_kind: RuleKind) -> (Node, NonterminalKind) {\n    match rule_kind {\n        RuleKind::R0 => {\n            let items_0 = Box::new(OptItems::try_from(nodes.pop().unwrap()).unwrap());\n            \n            states.truncate(states.len() - 1);\n            \n            (\n                Node::File(File {\n                    items: items_0,\n                }),\n                NonterminalKind::File\n            )\n        }\n        RuleKind::R1 => {\n            (\n                Node::OptItems(OptItems::Nil),\n                NonterminalKind::OptItems,\n            )\n        }\n        RuleKind::R2 => {\n            let t1 = Box::new(FileItem::try_from(nodes.pop().unwrap()).unwrap());\n            let t0 = Box::new(OptItems::try_from(nodes.pop().unwrap()).unwrap());\n            \n            states.truncate(states.len() - 2);\n            \n            (\n                Node::OptItems(OptItems::Cons(\n                    t0,\n                    t1,\n                )),\n                NonterminalKind::OptItems\n            )\n        }\n        RuleKind::R3 => {\n            let t1 = nodes.pop().unwrap().try_into_ident_1().unwrap();\n            nodes.pop().unwrap();\n            \n            states.truncate(states.len() - 2);\n            \n            (\n                Node::FileItem(FileItem::Start(\n                    t1,\n                )),\n                NonterminalKind::FileItem\n            )\n        }\n        RuleKind::R4 => {\n            let t0 = Box::new(Struct::try_from(nodes.pop().unwrap()).unwrap());\n            \n            states.truncate(states.len() - 1);\n            \n            (\n                Node::FileItem(FileItem::Struct(\n                    t0,\n                )),\n                NonterminalKind::FileItem\n            )\n        }\n        RuleKind::R5 => {\n            let t0 = Box::new(Enum::try_from(nodes.pop().unwrap()).unwrap());\n            \n            states.truncate(states.len() - 1);\n            \n            (\n                Node::FileItem(FileItem::Enum(\n                    t0,\n                )),\n                NonterminalKind::FileItem\n            )\n        }\n        RuleKind::R6 => {\n            let t0 = Box::new(TerminalEnum::try_from(nodes.pop().unwrap()).unwrap());\n            \n            states.truncate(states.len() - 1);\n            \n            (\n                Node::FileItem(FileItem::Terminal(\n                    t0,\n                )),\n                NonterminalKind::FileItem\n            )\n        }\n        RuleKind::R7 => {\n            let fieldset_2 = Box::new(Fieldset::try_from(nodes.pop().unwrap()).unwrap());\n            let name_1 = nodes.pop().unwrap().try_into_ident_1().unwrap();\n            nodes.pop().unwrap();\n            \n            states.truncate(states.len() - 3);\n            \n            (\n                Node::Struct(Struct {\n                    name: name_1,\n                    fieldset: fieldset_2,\n                }),\n                NonterminalKind::Struct\n            )\n        }\n        RuleKind::R8 => {\n            nodes.pop().unwrap();\n            let variants_3 = Box::new(OptEnumVariants::try_from(nodes.pop().unwrap()).unwrap());\n            nodes.pop().unwrap();\n            let name_1 = nodes.pop().unwrap().try_into_ident_1().unwrap();\n            nodes.pop().unwrap();\n            \n            states.truncate(states.len() - 5);\n            \n            (\n                Node::Enum(Enum {\n                    name: name_1,\n                    variants: variants_3,\n                }),\n                NonterminalKind::Enum\n            )\n        }\n        RuleKind::R9 => {\n            nodes.pop().unwrap();\n            let variants_3 = Box::new(OptTerminalEnumVariants::try_from(nodes.pop().unwrap()).unwrap());\n            nodes.pop().unwrap();\n            let name_1 = nodes.pop().unwrap().try_into_ident_1().unwrap();\n            nodes.pop().unwrap();\n            \n            states.truncate(states.len() - 5);\n            \n            (\n                Node::TerminalEnum(TerminalEnum {\n                    name: name_1,\n                    variants: variants_3,\n                }),\n                NonterminalKind::TerminalEnum\n            )\n        }\n        RuleKind::R10 => {\n            (\n                Node::Fieldset(Fieldset::Empty),\n                NonterminalKind::Fieldset,\n            )\n        }\n        RuleKind::R11 => {\n            let t0 = Box::new(NamedFieldset::try_from(nodes.pop().unwrap()).unwrap());\n            \n            states.truncate(states.len() - 1);\n            \n            (\n                Node::Fieldset(Fieldset::Named(\n                    t0,\n                )),\n                NonterminalKind::Fieldset\n            )\n        }\n        RuleKind::R12 => {\n            let t0 = Box::new(TupleFieldset::try_from(nodes.pop().unwrap()).unwrap());\n            \n            states.truncate(states.len() - 1);\n            \n            (\n                Node::Fieldset(Fieldset::Tuple(\n                    t0,\n                )),\n                NonterminalKind::Fieldset\n            )\n        }\n        RuleKind::R13 => {\n            nodes.pop().unwrap();\n            let fields_1 = Box::new(NamedFields::try_from(nodes.pop().unwrap()).unwrap());\n            nodes.pop().unwrap();\n            \n            states.truncate(states.len() - 3);\n            \n            (\n                Node::NamedFieldset(NamedFieldset {\n                    fields: fields_1,\n                }),\n                NonterminalKind::NamedFieldset\n            )\n        }\n        RuleKind::R14 => {\n            let t0 = Box::new(NamedField::try_from(nodes.pop().unwrap()).unwrap());\n            \n            states.truncate(states.len() - 1);\n            \n            (\n                Node::NamedFields(NamedFields::One(\n                    t0,\n                )),\n                NonterminalKind::NamedFields\n            )\n        }\n        RuleKind::R15 => {\n            let t1 = Box::new(NamedField::try_from(nodes.pop().unwrap()).unwrap());\n            let t0 = Box::new(NamedFields::try_from(nodes.pop().unwrap()).unwrap());\n            \n            states.truncate(states.len() - 2);\n            \n            (\n                Node::NamedFields(NamedFields::Cons(\n                    t0,\n                    t1,\n                )),\n                NonterminalKind::NamedFields\n            )\n        }\n        RuleKind::R16 => {\n            let symbol_2 = Box::new(IdentOrTerminalIdent::try_from(nodes.pop().unwrap()).unwrap());\n            nodes.pop().unwrap();\n            let name_0 = Box::new(IdentOrUnderscore::try_from(nodes.pop().unwrap()).unwrap());\n            \n            states.truncate(states.len() - 3);\n            \n            (\n                Node::NamedField(NamedField {\n                    name: name_0,\n                    symbol: symbol_2,\n                }),\n                NonterminalKind::NamedField\n            )\n        }\n        RuleKind::R17 => {\n            nodes.pop().unwrap();\n            let fields_1 = Box::new(TupleFields::try_from(nodes.pop().unwrap()).unwrap());\n            nodes.pop().unwrap();\n            \n            states.truncate(states.len() - 3);\n            \n            (\n                Node::TupleFieldset(TupleFieldset {\n                    fields: fields_1,\n                }),\n                NonterminalKind::TupleFieldset\n            )\n        }\n        RuleKind::R18 => {\n            let t0 = Box::new(TupleField::try_from(nodes.pop().unwrap()).unwrap());\n            \n            states.truncate(states.len() - 1);\n            \n            (\n                Node::TupleFields(TupleFields::One(\n                    t0,\n                )),\n                NonterminalKind::TupleFields\n            )\n        }\n        RuleKind::R19 => {\n            let t1 = Box::new(TupleField::try_from(nodes.pop().unwrap()).unwrap());\n            let t0 = Box::new(TupleFields::try_from(nodes.pop().unwrap()).unwrap());\n            \n            states.truncate(states.len() - 2);\n            \n            (\n                Node::TupleFields(TupleFields::Cons(\n                    t0,\n                    t1,\n                )),\n                NonterminalKind::TupleFields\n            )\n        }\n        RuleKind::R20 => {\n            let t0 = Box::new(IdentOrTerminalIdent::try_from(nodes.pop().unwrap()).unwrap());\n            \n            states.truncate(states.len() - 1);\n            \n            (\n                Node::TupleField(TupleField::Used(\n                    t0,\n                )),\n                NonterminalKind::TupleField\n            )\n        }\n        RuleKind::R21 => {\n            let t2 = Box::new(IdentOrTerminalIdent::try_from(nodes.pop().unwrap()).unwrap());\n            nodes.pop().unwrap();\n            nodes.pop().unwrap();\n            \n            states.truncate(states.len() - 3);\n            \n            (\n                Node::TupleField(TupleField::Skipped(\n                    t2,\n                )),\n                NonterminalKind::TupleField\n            )\n        }\n        RuleKind::R22 => {\n            (\n                Node::OptEnumVariants(OptEnumVariants::Nil),\n                NonterminalKind::OptEnumVariants,\n            )\n        }\n        RuleKind::R23 => {\n            let t1 = Box::new(EnumVariant::try_from(nodes.pop().unwrap()).unwrap());\n            let t0 = Box::new(OptEnumVariants::try_from(nodes.pop().unwrap()).unwrap());\n            \n            states.truncate(states.len() - 2);\n            \n            (\n                Node::OptEnumVariants(OptEnumVariants::Cons(\n                    t0,\n                    t1,\n                )),\n                NonterminalKind::OptEnumVariants\n            )\n        }\n        RuleKind::R24 => {\n            let fieldset_1 = Box::new(Fieldset::try_from(nodes.pop().unwrap()).unwrap());\n            let name_0 = nodes.pop().unwrap().try_into_ident_1().unwrap();\n            \n            states.truncate(states.len() - 2);\n            \n            (\n                Node::EnumVariant(EnumVariant {\n                    name: name_0,\n                    fieldset: fieldset_1,\n                }),\n                NonterminalKind::EnumVariant\n            )\n        }\n        RuleKind::R25 => {\n            (\n                Node::OptTerminalEnumVariants(OptTerminalEnumVariants::Nil),\n                NonterminalKind::OptTerminalEnumVariants,\n            )\n        }\n        RuleKind::R26 => {\n            let t1 = Box::new(TerminalEnumVariant::try_from(nodes.pop().unwrap()).unwrap());\n            let t0 = Box::new(OptTerminalEnumVariants::try_from(nodes.pop().unwrap()).unwrap());\n            \n            states.truncate(states.len() - 2);\n            \n            (\n                Node::OptTerminalEnumVariants(OptTerminalEnumVariants::Cons(\n                    t0,\n                    t1,\n                )),\n                NonterminalKind::OptTerminalEnumVariants\n            )\n        }\n        RuleKind::R27 => {\n            let type__2 = Box::new(Type::try_from(nodes.pop().unwrap()).unwrap());\n            nodes.pop().unwrap();\n            let name_0 = nodes.pop().unwrap().try_into_terminal_ident_2().unwrap();\n            \n            states.truncate(states.len() - 3);\n            \n            (\n                Node::TerminalEnumVariant(TerminalEnumVariant {\n                    name: name_0,\n                    type_: type__2,\n                }),\n                NonterminalKind::TerminalEnumVariant\n            )\n        }\n        RuleKind::R28 => {\n            nodes.pop().unwrap();\n            nodes.pop().unwrap();\n            \n            states.truncate(states.len() - 2);\n            \n            (\n                Node::Type(Type::Unit(\n                    \n                )),\n                NonterminalKind::Type\n            )\n        }\n        RuleKind::R29 => {\n            let t0 = Box::new(Path::try_from(nodes.pop().unwrap()).unwrap());\n            \n            states.truncate(states.len() - 1);\n            \n            (\n                Node::Type(Type::Path(\n                    t0,\n                )),\n                NonterminalKind::Type\n            )\n        }\n        RuleKind::R30 => {\n            let t0 = Box::new(ComplexType::try_from(nodes.pop().unwrap()).unwrap());\n            \n            states.truncate(states.len() - 1);\n            \n            (\n                Node::Type(Type::Complex(\n                    t0,\n                )),\n                NonterminalKind::Type\n            )\n        }\n        RuleKind::R31 => {\n            let t0 = nodes.pop().unwrap().try_into_ident_1().unwrap();\n            \n            states.truncate(states.len() - 1);\n            \n            (\n                Node::Path(Path::One(\n                    t0,\n                )),\n                NonterminalKind::Path\n            )\n        }\n        RuleKind::R32 => {\n            let t2 = nodes.pop().unwrap().try_into_ident_1().unwrap();\n            nodes.pop().unwrap();\n            let t0 = Box::new(Path::try_from(nodes.pop().unwrap()).unwrap());\n            \n            states.truncate(states.len() - 3);\n            \n            (\n                Node::Path(Path::Cons(\n                    t0,\n                    t2,\n                )),\n                NonterminalKind::Path\n            )\n        }\n        RuleKind::R33 => {\n            nodes.pop().unwrap();\n            let args_2 = Box::new(CommaSeparatedTypes::try_from(nodes.pop().unwrap()).unwrap());\n            nodes.pop().unwrap();\n            let callee_0 = Box::new(Type::try_from(nodes.pop().unwrap()).unwrap());\n            \n            states.truncate(states.len() - 4);\n            \n            (\n                Node::ComplexType(ComplexType {\n                    callee: callee_0,\n                    args: args_2,\n                }),\n                NonterminalKind::ComplexType\n            )\n        }\n        RuleKind::R34 => {\n            let t0 = Box::new(Type::try_from(nodes.pop().unwrap()).unwrap());\n            \n            states.truncate(states.len() - 1);\n            \n            (\n                Node::CommaSeparatedTypes(CommaSeparatedTypes::One(\n                    t0,\n                )),\n                NonterminalKind::CommaSeparatedTypes\n            )\n        }\n        RuleKind::R35 => {\n            let t2 = Box::new(Type::try_from(nodes.pop().unwrap()).unwrap());\n            nodes.pop().unwrap();\n            let t0 = Box::new(CommaSeparatedTypes::try_from(nodes.pop().unwrap()).unwrap());\n            \n            states.truncate(states.len() - 3);\n            \n            (\n                Node::CommaSeparatedTypes(CommaSeparatedTypes::Cons(\n                    t0,\n                    t2,\n                )),\n                NonterminalKind::CommaSeparatedTypes\n            )\n        }\n        RuleKind::R36 => {\n            let t0 = nodes.pop().unwrap().try_into_ident_1().unwrap();\n            \n            states.truncate(states.len() - 1);\n            \n            (\n                Node::IdentOrUnderscore(IdentOrUnderscore::Ident(\n                    t0,\n                )),\n                NonterminalKind::IdentOrUnderscore\n            )\n        }\n        RuleKind::R37 => {\n            let t0 = nodes.pop().unwrap().try_into_underscore_0().unwrap();\n            \n            states.truncate(states.len() - 1);\n            \n            (\n                Node::IdentOrUnderscore(IdentOrUnderscore::Underscore(\n                    t0,\n                )),\n                NonterminalKind::IdentOrUnderscore\n            )\n        }\n        RuleKind::R38 => {\n            let t0 = nodes.pop().unwrap().try_into_ident_1().unwrap();\n            \n            states.truncate(states.len() - 1);\n            \n            (\n                Node::IdentOrTerminalIdent(IdentOrTerminalIdent::Ident(\n                    t0,\n                )),\n                NonterminalKind::IdentOrTerminalIdent\n            )\n        }\n        RuleKind::R39 => {\n            let t0 = nodes.pop().unwrap().try_into_terminal_ident_2().unwrap();\n            \n            states.truncate(states.len() - 1);\n            \n            (\n                Node::IdentOrTerminalIdent(IdentOrTerminalIdent::Terminal(\n                    t0,\n                )),\n                NonterminalKind::IdentOrTerminalIdent\n            )\n        }\n    }\n}\n\nimpl QuasiterminalKind {\n    fn from_quasiterminal(quasiterminal: &Quasiterminal) -> Self {\n        match quasiterminal {\n            Quasiterminal::Terminal(terminal) => Self::from_terminal(terminal),\n            Quasiterminal::Eof => Self::Eof,\n        }\n    }\n\n    fn from_terminal(terminal: &Token) -> Self {\n        match terminal {\n            Token::Underscore(_) => Self::Underscore,\n            Token::Ident(_) => Self::Ident,\n            Token::TerminalIdent(_) => Self::TerminalIdent,\n            Token::StartKw(_) => Self::StartKw,\n            Token::StructKw(_) => Self::StructKw,\n            Token::EnumKw(_) => Self::EnumKw,\n            Token::TerminalKw(_) => Self::TerminalKw,\n            Token::Colon(_) => Self::Colon,\n            Token::DoubleColon(_) => Self::DoubleColon,\n            Token::Comma(_) => Self::Comma,\n            Token::LParen(_) => Self::LParen,\n            Token::RParen(_) => Self::RParen,\n            Token::LCurly(_) => Self::LCurly,\n            Token::RCurly(_) => Self::RCurly,\n            Token::LAngle(_) => Self::LAngle,\n            Token::RAngle(_) => Self::RAngle,\n        }\n    }\n}\n\nimpl Node {\n    fn from_terminal(terminal: Token) -> Self {\n        match terminal {\n            Token::Underscore(t) => Self::Underscore(t),\n            Token::Ident(t) => Self::Ident(t),\n            Token::TerminalIdent(t) => Self::TerminalIdent(t),\n            Token::StartKw(t) => Self::StartKw(t),\n            Token::StructKw(t) => Self::StructKw(t),\n            Token::EnumKw(t) => Self::EnumKw(t),\n            Token::TerminalKw(t) => Self::TerminalKw(t),\n            Token::Colon(t) => Self::Colon(t),\n            Token::DoubleColon(t) => Self::DoubleColon(t),\n            Token::Comma(t) => Self::Comma(t),\n            Token::LParen(t) => Self::LParen(t),\n            Token::RParen(t) => Self::RParen(t),\n            Token::LCurly(t) => Self::LCurly(t),\n            Token::RCurly(t) => Self::RCurly(t),\n            Token::LAngle(t) => Self::LAngle(t),\n            Token::RAngle(t) => Self::RAngle(t),\n        }\n    }\n}\n\nimpl Quasiterminal {\n    fn try_into_terminal(self) -> Result<Token, ()> {\n        match self {\n            Self::Terminal(terminal) => Ok(terminal),\n            Self::Eof => Err(()),\n        }\n    }\n}\n\nconst ACTION_TABLE: [[Action; 17]; 65] = [\n    [\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R1),\n        Action::Reduce(RuleKind::R1),\n        Action::Reduce(RuleKind::R1),\n        Action::Reduce(RuleKind::R1),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R1),\n    ],\n    [\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Shift(State::S3),\n        Action::Shift(State::S8),\n        Action::Shift(State::S11),\n        Action::Shift(State::S16),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R0),\n    ],\n    [\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R2),\n        Action::Reduce(RuleKind::R2),\n        Action::Reduce(RuleKind::R2),\n        Action::Reduce(RuleKind::R2),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R2),\n    ],\n    [\n        Action::Err,\n        Action::Shift(State::S4),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R3),\n        Action::Reduce(RuleKind::R3),\n        Action::Reduce(RuleKind::R3),\n        Action::Reduce(RuleKind::R3),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R3),\n    ],\n    [\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R4),\n        Action::Reduce(RuleKind::R4),\n        Action::Reduce(RuleKind::R4),\n        Action::Reduce(RuleKind::R4),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R4),\n    ],\n    [\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R5),\n        Action::Reduce(RuleKind::R5),\n        Action::Reduce(RuleKind::R5),\n        Action::Reduce(RuleKind::R5),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R5),\n    ],\n    [\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R6),\n        Action::Reduce(RuleKind::R6),\n        Action::Reduce(RuleKind::R6),\n        Action::Reduce(RuleKind::R6),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R6),\n    ],\n    [\n        Action::Err,\n        Action::Shift(State::S9),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R10),\n        Action::Reduce(RuleKind::R10),\n        Action::Reduce(RuleKind::R10),\n        Action::Reduce(RuleKind::R10),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Shift(State::S32),\n        Action::Err,\n        Action::Shift(State::S24),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R10),\n    ],\n    [\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R7),\n        Action::Reduce(RuleKind::R7),\n        Action::Reduce(RuleKind::R7),\n        Action::Reduce(RuleKind::R7),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R7),\n    ],\n    [\n        Action::Err,\n        Action::Shift(State::S12),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Shift(State::S13),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Reduce(RuleKind::R22),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R22),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Shift(State::S21),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Shift(State::S15),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R8),\n        Action::Reduce(RuleKind::R8),\n        Action::Reduce(RuleKind::R8),\n        Action::Reduce(RuleKind::R8),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R8),\n    ],\n    [\n        Action::Err,\n        Action::Shift(State::S17),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Shift(State::S18),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R25),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R25),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Err,\n        Action::Shift(State::S44),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Shift(State::S20),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R9),\n        Action::Reduce(RuleKind::R9),\n        Action::Reduce(RuleKind::R9),\n        Action::Reduce(RuleKind::R9),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R9),\n    ],\n    [\n        Action::Err,\n        Action::Reduce(RuleKind::R10),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Shift(State::S32),\n        Action::Err,\n        Action::Shift(State::S24),\n        Action::Reduce(RuleKind::R10),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Reduce(RuleKind::R11),\n        Action::Err,\n        Action::Reduce(RuleKind::R11),\n        Action::Reduce(RuleKind::R11),\n        Action::Reduce(RuleKind::R11),\n        Action::Reduce(RuleKind::R11),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R11),\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R11),\n    ],\n    [\n        Action::Err,\n        Action::Reduce(RuleKind::R12),\n        Action::Err,\n        Action::Reduce(RuleKind::R12),\n        Action::Reduce(RuleKind::R12),\n        Action::Reduce(RuleKind::R12),\n        Action::Reduce(RuleKind::R12),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R12),\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R12),\n    ],\n    [\n        Action::Shift(State::S61),\n        Action::Shift(State::S60),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Shift(State::S61),\n        Action::Shift(State::S60),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Shift(State::S26),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Reduce(RuleKind::R13),\n        Action::Err,\n        Action::Reduce(RuleKind::R13),\n        Action::Reduce(RuleKind::R13),\n        Action::Reduce(RuleKind::R13),\n        Action::Reduce(RuleKind::R13),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R13),\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R13),\n    ],\n    [\n        Action::Reduce(RuleKind::R14),\n        Action::Reduce(RuleKind::R14),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R14),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Reduce(RuleKind::R15),\n        Action::Reduce(RuleKind::R15),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R15),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Shift(State::S30),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Shift(State::S62),\n        Action::Shift(State::S63),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Reduce(RuleKind::R16),\n        Action::Reduce(RuleKind::R16),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R16),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Shift(State::S38),\n        Action::Shift(State::S62),\n        Action::Shift(State::S63),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Shift(State::S38),\n        Action::Shift(State::S62),\n        Action::Shift(State::S63),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Shift(State::S34),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Reduce(RuleKind::R17),\n        Action::Err,\n        Action::Reduce(RuleKind::R17),\n        Action::Reduce(RuleKind::R17),\n        Action::Reduce(RuleKind::R17),\n        Action::Reduce(RuleKind::R17),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R17),\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R17),\n    ],\n    [\n        Action::Reduce(RuleKind::R18),\n        Action::Reduce(RuleKind::R18),\n        Action::Reduce(RuleKind::R18),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R18),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Reduce(RuleKind::R19),\n        Action::Reduce(RuleKind::R19),\n        Action::Reduce(RuleKind::R19),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R19),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Reduce(RuleKind::R20),\n        Action::Reduce(RuleKind::R20),\n        Action::Reduce(RuleKind::R20),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R20),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Shift(State::S39),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Shift(State::S62),\n        Action::Shift(State::S63),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Reduce(RuleKind::R21),\n        Action::Reduce(RuleKind::R21),\n        Action::Reduce(RuleKind::R21),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R21),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Reduce(RuleKind::R23),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R23),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Reduce(RuleKind::R24),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R24),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R26),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R26),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Shift(State::S45),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Shift(State::S53),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Shift(State::S49),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R27),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R27),\n        Action::Shift(State::S47),\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Shift(State::S53),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Shift(State::S49),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Shift(State::S53),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Shift(State::S49),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Shift(State::S50),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R28),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R28),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R28),\n        Action::Reduce(RuleKind::R28),\n        Action::Reduce(RuleKind::R28),\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R29),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Shift(State::S54),\n        Action::Reduce(RuleKind::R29),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R29),\n        Action::Reduce(RuleKind::R29),\n        Action::Reduce(RuleKind::R29),\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R30),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R30),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R30),\n        Action::Reduce(RuleKind::R30),\n        Action::Reduce(RuleKind::R30),\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R31),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R31),\n        Action::Reduce(RuleKind::R31),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R31),\n        Action::Reduce(RuleKind::R31),\n        Action::Reduce(RuleKind::R31),\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Shift(State::S55),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R32),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R32),\n        Action::Reduce(RuleKind::R32),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R32),\n        Action::Reduce(RuleKind::R32),\n        Action::Reduce(RuleKind::R32),\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R34),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Shift(State::S47),\n        Action::Reduce(RuleKind::R34),\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R35),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Shift(State::S47),\n        Action::Reduce(RuleKind::R35),\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Shift(State::S48),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Shift(State::S59),\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R33),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R33),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R33),\n        Action::Reduce(RuleKind::R33),\n        Action::Reduce(RuleKind::R33),\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R36),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R37),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Reduce(RuleKind::R38),\n        Action::Reduce(RuleKind::R38),\n        Action::Reduce(RuleKind::R38),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R38),\n        Action::Err,\n        Action::Reduce(RuleKind::R38),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Reduce(RuleKind::R39),\n        Action::Reduce(RuleKind::R39),\n        Action::Reduce(RuleKind::R39),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Reduce(RuleKind::R39),\n        Action::Err,\n        Action::Reduce(RuleKind::R39),\n        Action::Err,\n        Action::Err,\n        Action::Err,\n    ],\n    [\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Err,\n        Action::Accept,\n    ],\n];\n\nfn get_action(top_state: State, next_quasiterminal_kind: QuasiterminalKind) -> Action {\n    ACTION_TABLE[top_state as usize][next_quasiterminal_kind as usize]\n}\n\nconst GOTO_TABLE: [[Option<State>; 23]; 65] = [\n    [\n        Some(State::S64),\n        Some(State::S1),\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        Some(State::S2),\n        Some(State::S5),\n        Some(State::S6),\n        Some(State::S7),\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        Some(State::S10),\n        Some(State::S22),\n        None,\n        None,\n        Some(State::S23),\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        Some(State::S14),\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        Some(State::S41),\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        Some(State::S19),\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        Some(State::S43),\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        Some(State::S42),\n        Some(State::S22),\n        None,\n        None,\n        Some(State::S23),\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        Some(State::S25),\n        Some(State::S27),\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        Some(State::S29),\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        Some(State::S28),\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        Some(State::S29),\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        Some(State::S31),\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        Some(State::S33),\n        Some(State::S35),\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        Some(State::S37),\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        Some(State::S36),\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        Some(State::S37),\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        Some(State::S40),\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        Some(State::S46),\n        Some(State::S51),\n        Some(State::S52),\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        Some(State::S56),\n        Some(State::S51),\n        Some(State::S52),\n        Some(State::S58),\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        Some(State::S57),\n        Some(State::S51),\n        Some(State::S52),\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n    [\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n        None,\n    ],\n];\n\nfn get_goto(top_state: State, new_node_kind: NonterminalKind) -> Option<State> {\n    GOTO_TABLE[top_state as usize][new_node_kind as usize]\n}\n\nimpl TryFrom<Node> for File {\n    type Error = Node;\n\n    fn try_from(node: Node) -> Result<Self, Self::Error> {\n        match node {\n            Node::File(n) => Ok(n),\n            _ => Err(node),\n        }\n    }\n}\n\nimpl TryFrom<Node> for OptItems {\n    type Error = Node;\n\n    fn try_from(node: Node) -> Result<Self, Self::Error> {\n        match node {\n            Node::OptItems(n) => Ok(n),\n            _ => Err(node),\n        }\n    }\n}\n\nimpl TryFrom<Node> for FileItem {\n    type Error = Node;\n\n    fn try_from(node: Node) -> Result<Self, Self::Error> {\n        match node {\n            Node::FileItem(n) => Ok(n),\n            _ => Err(node),\n        }\n    }\n}\n\nimpl TryFrom<Node> for Struct {\n    type Error = Node;\n\n    fn try_from(node: Node) -> Result<Self, Self::Error> {\n        match node {\n            Node::Struct(n) => Ok(n),\n            _ => Err(node),\n        }\n    }\n}\n\nimpl TryFrom<Node> for Enum {\n    type Error = Node;\n\n    fn try_from(node: Node) -> Result<Self, Self::Error> {\n        match node {\n            Node::Enum(n) => Ok(n),\n            _ => Err(node),\n        }\n    }\n}\n\nimpl TryFrom<Node> for TerminalEnum {\n    type Error = Node;\n\n    fn try_from(node: Node) -> Result<Self, Self::Error> {\n        match node {\n            Node::TerminalEnum(n) => Ok(n),\n            _ => Err(node),\n        }\n    }\n}\n\nimpl TryFrom<Node> for Fieldset {\n    type Error = Node;\n\n    fn try_from(node: Node) -> Result<Self, Self::Error> {\n        match node {\n            Node::Fieldset(n) => Ok(n),\n            _ => Err(node),\n        }\n    }\n}\n\nimpl TryFrom<Node> for NamedFieldset {\n    type Error = Node;\n\n    fn try_from(node: Node) -> Result<Self, Self::Error> {\n        match node {\n            Node::NamedFieldset(n) => Ok(n),\n            _ => Err(node),\n        }\n    }\n}\n\nimpl TryFrom<Node> for NamedFields {\n    type Error = Node;\n\n    fn try_from(node: Node) -> Result<Self, Self::Error> {\n        match node {\n            Node::NamedFields(n) => Ok(n),\n            _ => Err(node),\n        }\n    }\n}\n\nimpl TryFrom<Node> for NamedField {\n    type Error = Node;\n\n    fn try_from(node: Node) -> Result<Self, Self::Error> {\n        match node {\n            Node::NamedField(n) => Ok(n),\n            _ => Err(node),\n        }\n    }\n}\n\nimpl TryFrom<Node> for TupleFieldset {\n    type Error = Node;\n\n    fn try_from(node: Node) -> Result<Self, Self::Error> {\n        match node {\n            Node::TupleFieldset(n) => Ok(n),\n            _ => Err(node),\n        }\n    }\n}\n\nimpl TryFrom<Node> for TupleFields {\n    type Error = Node;\n\n    fn try_from(node: Node) -> Result<Self, Self::Error> {\n        match node {\n            Node::TupleFields(n) => Ok(n),\n            _ => Err(node),\n        }\n    }\n}\n\nimpl TryFrom<Node> for TupleField {\n    type Error = Node;\n\n    fn try_from(node: Node) -> Result<Self, Self::Error> {\n        match node {\n            Node::TupleField(n) => Ok(n),\n            _ => Err(node),\n        }\n    }\n}\n\nimpl TryFrom<Node> for OptEnumVariants {\n    type Error = Node;\n\n    fn try_from(node: Node) -> Result<Self, Self::Error> {\n        match node {\n            Node::OptEnumVariants(n) => Ok(n),\n            _ => Err(node),\n        }\n    }\n}\n\nimpl TryFrom<Node> for EnumVariant {\n    type Error = Node;\n\n    fn try_from(node: Node) -> Result<Self, Self::Error> {\n        match node {\n            Node::EnumVariant(n) => Ok(n),\n            _ => Err(node),\n        }\n    }\n}\n\nimpl TryFrom<Node> for OptTerminalEnumVariants {\n    type Error = Node;\n\n    fn try_from(node: Node) -> Result<Self, Self::Error> {\n        match node {\n            Node::OptTerminalEnumVariants(n) => Ok(n),\n            _ => Err(node),\n        }\n    }\n}\n\nimpl TryFrom<Node> for TerminalEnumVariant {\n    type Error = Node;\n\n    fn try_from(node: Node) -> Result<Self, Self::Error> {\n        match node {\n            Node::TerminalEnumVariant(n) => Ok(n),\n            _ => Err(node),\n        }\n    }\n}\n\nimpl TryFrom<Node> for Type {\n    type Error = Node;\n\n    fn try_from(node: Node) -> Result<Self, Self::Error> {\n        match node {\n            Node::Type(n) => Ok(n),\n            _ => Err(node),\n        }\n    }\n}\n\nimpl TryFrom<Node> for Path {\n    type Error = Node;\n\n    fn try_from(node: Node) -> Result<Self, Self::Error> {\n        match node {\n            Node::Path(n) => Ok(n),\n            _ => Err(node),\n        }\n    }\n}\n\nimpl TryFrom<Node> for ComplexType {\n    type Error = Node;\n\n    fn try_from(node: Node) -> Result<Self, Self::Error> {\n        match node {\n            Node::ComplexType(n) => Ok(n),\n            _ => Err(node),\n        }\n    }\n}\n\nimpl TryFrom<Node> for CommaSeparatedTypes {\n    type Error = Node;\n\n    fn try_from(node: Node) -> Result<Self, Self::Error> {\n        match node {\n            Node::CommaSeparatedTypes(n) => Ok(n),\n            _ => Err(node),\n        }\n    }\n}\n\nimpl TryFrom<Node> for IdentOrUnderscore {\n    type Error = Node;\n\n    fn try_from(node: Node) -> Result<Self, Self::Error> {\n        match node {\n            Node::IdentOrUnderscore(n) => Ok(n),\n            _ => Err(node),\n        }\n    }\n}\n\nimpl TryFrom<Node> for IdentOrTerminalIdent {\n    type Error = Node;\n\n    fn try_from(node: Node) -> Result<Self, Self::Error> {\n        match node {\n            Node::IdentOrTerminalIdent(n) => Ok(n),\n            _ => Err(node),\n        }\n    }\n}\n\nimpl Node {\n    fn try_into_underscore_0(self) -> Result<crate::data::ByteIndex, Self> {\n        match self {\n            Self::Underscore(t) => Ok(t),\n            _ => Err(self),\n        }\n    }\n    \n    fn try_into_ident_1(self) -> Result<crate::data::token::Ident, Self> {\n        match self {\n            Self::Ident(t) => Ok(t),\n            _ => Err(self),\n        }\n    }\n    \n    fn try_into_terminal_ident_2(self) -> Result<crate::data::token::TerminalIdent, Self> {\n        match self {\n            Self::TerminalIdent(t) => Ok(t),\n            _ => Err(self),\n        }\n    }\n    \n    fn try_into_start_kw_3(self) -> Result<crate::data::ByteIndex, Self> {\n        match self {\n            Self::StartKw(t) => Ok(t),\n            _ => Err(self),\n        }\n    }\n    \n    fn try_into_struct_kw_4(self) -> Result<crate::data::ByteIndex, Self> {\n        match self {\n            Self::StructKw(t) => Ok(t),\n            _ => Err(self),\n        }\n    }\n    \n    fn try_into_enum_kw_5(self) -> Result<crate::data::ByteIndex, Self> {\n        match self {\n            Self::EnumKw(t) => Ok(t),\n            _ => Err(self),\n        }\n    }\n    \n    fn try_into_terminal_kw_6(self) -> Result<crate::data::ByteIndex, Self> {\n        match self {\n            Self::TerminalKw(t) => Ok(t),\n            _ => Err(self),\n        }\n    }\n    \n    fn try_into_colon_7(self) -> Result<crate::data::ByteIndex, Self> {\n        match self {\n            Self::Colon(t) => Ok(t),\n            _ => Err(self),\n        }\n    }\n    \n    fn try_into_double_colon_8(self) -> Result<crate::data::ByteIndex, Self> {\n        match self {\n            Self::DoubleColon(t) => Ok(t),\n            _ => Err(self),\n        }\n    }\n    \n    fn try_into_comma_9(self) -> Result<crate::data::ByteIndex, Self> {\n        match self {\n            Self::Comma(t) => Ok(t),\n            _ => Err(self),\n        }\n    }\n    \n    fn try_into_l_paren_10(self) -> Result<crate::data::ByteIndex, Self> {\n        match self {\n            Self::LParen(t) => Ok(t),\n            _ => Err(self),\n        }\n    }\n    \n    fn try_into_r_paren_11(self) -> Result<crate::data::ByteIndex, Self> {\n        match self {\n            Self::RParen(t) => Ok(t),\n            _ => Err(self),\n        }\n    }\n    \n    fn try_into_l_curly_12(self) -> Result<crate::data::ByteIndex, Self> {\n        match self {\n            Self::LCurly(t) => Ok(t),\n            _ => Err(self),\n        }\n    }\n    \n    fn try_into_r_curly_13(self) -> Result<crate::data::ByteIndex, Self> {\n        match self {\n            Self::RCurly(t) => Ok(t),\n            _ => Err(self),\n        }\n    }\n    \n    fn try_into_l_angle_14(self) -> Result<crate::data::ByteIndex, Self> {\n        match self {\n            Self::LAngle(t) => Ok(t),\n            _ => Err(self),\n        }\n    }\n    \n    fn try_into_r_angle_15(self) -> Result<crate::data::ByteIndex, Self> {\n        match self {\n            Self::RAngle(t) => Ok(t),\n            _ => Err(self),\n        }\n    }\n}\n",
)
