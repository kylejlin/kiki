use crate::data::{table::*, validated_file::*, KikiErr, RustSrc};
use std::collections::HashSet;

pub fn table_to_rust(table: &Table, file: ValidatedFile) -> Result<RustSrc, KikiErr> {
    let mut used_identifiers = file.defined_identifiers;
    let start_type_name = &file.start;
    let token_enum_name = &file.terminal_enum.name;
    let eof_variant_name = create_unique_identifier("Eof", &mut used_identifiers);
    let quasitoken_enum_name = create_unique_identifier("Quasitoken", &mut used_identifiers);
    let quasitoken_kind_enum_name =
        create_unique_identifier("QuasitokenKind", &mut used_identifiers);
    let nonterminal_kind_enum_name =
        create_unique_identifier("NonterminalKind", &mut used_identifiers);
    let state_enum_name = create_unique_identifier("State", &mut used_identifiers);
    let node_enum_name = create_unique_identifier("Node", &mut used_identifiers);
    let action_enum_name = create_unique_identifier("Action", &mut used_identifiers);
    let rule_kind_enum_name = create_unique_identifier("RuleKind", &mut used_identifiers);

    let token_kind_enum_variants_indent_1 = file
        .terminal_enum
        .variants
        .iter()
        .map(|variant| {
            let name = &variant.dollarless_name;
            format!("{name},\n")
        })
        .collect::<String>()
        .indent(1);

    let nonterminal_kind_enum_variants_indent_1 = file
        .nonterminals
        .iter()
        .map(|nonterminal| format!("{},\n", nonterminal.name()))
        .collect::<String>()
        .indent(1);

    let state_enum_variants_indent_1 = (0..table.states())
        .map(|i| format!("S{i},"))
        .collect::<String>()
        .indent(1);

    let node_enum_variants_indent_1: String = file
        .nonterminals
        .iter()
        .map(|nonterminal| format!("{name}({name}),", name = nonterminal.name()))
        .chain(file.terminal_enum.variants.iter().map(|variant| {
            let name = &variant.dollarless_name;
            let type_ = &variant.type_;
            format!("{name}({type_}),\n")
        }))
        .collect::<String>()
        .indent(1);

    let rule_kinds = file
        .nonterminals
        .iter()
        .map(|nonterminal| match nonterminal {
            Nonterminal::Struct(_) => 1,
            Nonterminal::Enum(e) => e.variants.len(),
        })
        .sum();
    let rule_kind_enum_variants_indent_1: String = (0..rule_kinds)
        .map(|i| format!("R{i},\n"))
        .collect::<String>()
        .indent(1);

    let pop_and_reduce_match_arms_indent_2: String = file
        .nonterminals
        .iter()
        .flat_map(|nonterminal| match nonterminal {
            Nonterminal::Struct(s) => vec![(&s.name.name, None, &s.fieldset)],
            Nonterminal::Enum(e) => e
                .variants
                .iter()
                .map(|v| (&e.name.name, Some(&v.name.name), &v.fieldset))
                .collect(),
        })
        .enumerate()
        .map(|(rule_index, (type_name, opt_variant_name, fieldset))| {
            format!(
                r#"{rule_kind_enum_name}::R{rule_index} => {{
    // TODO: Reduction code
}}"#
            )
        })
        .collect::<String>()
        .indent(2);

    let quasitoken_kind_from_token_match_arms_indent_3: String = file
        .terminal_enum
        .variants
        .iter()
        .map(|variant| {
            let name = &variant.dollarless_name;
            format!("{token_enum_name}::{name}(_) => Self::{name},\n")
        })
        .collect::<String>()
        .indent(3);

    let node_from_token_match_arms_indent_3: String = file
        .terminal_enum
        .variants
        .iter()
        .map(|variant| {
            let name = &variant.dollarless_name;
            format!("{token_enum_name}::{name}(t) => Self::{name}(t),\n")
        })
        .collect::<String>()
        .indent(3);

    let impl_try_from_node_for_each_nonterminal: String = file
        .nonterminals
        .iter()
        .map(|nonterminal| {
            let nonterminal_name = nonterminal.name();
            format!(
                r#"impl TryFrom<{node_enum_name}> for {nonterminal_name} {{
    type Error = {node_enum_name};

    fn try_from(node: {node_enum_name}) -> Result<Self, Self::Error> {{
        match node {{
            {node_enum_name}::{nonterminal_name}(n) => Ok(n),
            _ => Err(node),
        }}
    }}
}}"#
            )
        })
        .collect::<Vec<_>>()
        .join("\n\n");

    let try_into_terminal_variant_name_variant_index_fns_indent_1: String = file
        .terminal_enum
        .variants
        .iter()
        .map()
        .collect::<String>()
        .indent(1);

    Ok(RustSrc(format!(
        r#"// This code was generated by Kiki.

enum {quasitoken_enum_name} {{
    Token({token_enum_name}),
    {eof_variant_name},
}}

#[derive(Clone, Copy)]
enum {quasitoken_kind_enum_name} {{
{token_kind_enum_variants_indent_1}
    {eof_variant_name},
}}

#[derive(Clone, Copy)]
enum {nonterminal_kind_enum_name} {{
{nonterminal_kind_enum_variants_indent_1}
}}

#[derive(Clone, Copy)]
enum {state_enum_name} {{
{state_enum_variants_indent_1}
}}

enum {node_enum_name} {{
{node_enum_variants_indent_1}
}}

#[derive(Clone, Copy)]
enum {action_enum_name} {{
    Shift({state_enum_name}),
    Reduce({rule_kind_enum_name}),
    Accept,
    Err,
}}

#[derive(Clone, Copy)]
enum {rule_kind_enum_name} {{
{rule_kind_enum_variants_indent_1}
}}

pub fn parse<S>(src: S) -> Result<{start_type_name}, {token_enum_name}>
where S: IntoIterator<Item = {token_enum_name}> {{
    let mut tokens = src.into_iter()
        .map({quasitoken_enum_name}::Token)
        .chain(std::iter::once({quasitoken_enum_name}::Eof))
        .peekable();
    let mut states = vec![{state_enum_name}::S0];
    let mut nodes: Vec<{node_enum_name}> = vec![];
    loop {{
        let top_state = *states.last().unwrap();
        let next_quasitoken_kind = {quasitoken_kind_enum_name}::from_quasitoken(tokens.peek().unwrap());
        match get_action(top_state, next_quasitoken_kind) {{
            {action_enum_name}::Shift(new_state) => {{
                states.push(new_state);
                nodes.push({node_enum_name}::from_token(tokens.next().unwrap().try_into_token().unwrap()));
            }}

            {action_enum_name}::Reduce(rule_kind) => {{
                let (new_node, new_node_kind) = pop_and_reduce(&mut states, &mut nodes, rule_kind);
                nodes.push(new_node);
                let temp_top_state = *states.last().unwrap();
                let Some(new_state) = get_goto(temp_top_state, new_node_kind) else {{
                    return Err(tokens.next().unwrap());
                }};
                states.push(new_state);
            }}

            {action_enum_name}::Accept => {{
                return Ok({start_type_name}::try_from(nodes.pop().unwrap()).unwrap());
            }}

            {action_enum_name}::Err => {{
                return Err(tokens.next().unwrap());
            }}
        }}
    }}
}}

fn pop_and_reduce(states: &mut Vec<{state_enum_name}>, nodes: &mut Vec<{node_enum_name}>, rule_kind: {rule_kind_enum_name}) -> ({node_enum_name}, {nonterminal_kind_enum_name}) {{
    match rule_kind {{
{pop_and_reduce_match_arms_indent_2}
    }}
}}

impl {quasitoken_kind_enum_name} {{
    fn from_quasitoken(quasitoken: &{quasitoken_enum_name}) -> Self {{
        match quasitoken {{
            Self::Token(token) => Self::from_token(token),
            Self::{eof_variant_name} => Self::{eof_variant_name},
        }}
    }}

    fn from_token(token: &{token_enum_name}) -> Self {{
        match token {{
{quasitoken_kind_from_token_match_arms_indent_3}
        }}
    }}
}}

impl {node_enum_name} {{
    fn from_token(token: {token_enum_name}) -> Self {{
        match token {{
{node_from_token_match_arms_indent_3}
        }}
        }}
    }}
}}

impl {quasitoken_enum_name} {{
    fn try_into_token(self) -> Result<{token_enum_name}, ()> {{
        match self {{
            Self::Token(token) => Ok(token),
            Self::{eof_variant_name} => Err(()),
        }}
    }}
}}

fn get_action(top_state: {state_enum_name}, next_quasitoken_kind: {quasitoken_kind_enum_name}) -> {action_enum_name} {{
    todo!()
}}

fn get_goto(top_state: {state_enum_name}, new_node_kind: {nonterminal_kind_enum_name}) -> Option<{state_enum_name}> {{
    todo!()
}}

{impl_try_from_node_for_each_nonterminal}

impl {node_enum_name} {{
{try_into_terminal_variant_name_variant_index_fns_indent_1}
}}
"#
    )))
}

fn create_unique_identifier(preferred_name: &str, used: &mut HashSet<String>) -> String {
    if !used.contains(preferred_name) {
        used.insert(preferred_name.to_string());
        return preferred_name.to_string();
    }

    let mut i = 2;
    loop {
        let name = format!("{}{}", preferred_name, i);
        if !used.contains(&name) {
            used.insert(name.clone());
            return name;
        }
        i += 1;
    }
}

trait Indent {
    fn indent(&self, indent: usize) -> String;
}

impl Indent for str {
    fn indent(&self, level: usize) -> String {
        let mut out = String::new();
        let indent = &"    ".repeat(level);
        out.push_str(indent);
        for c in self.chars() {
            out.push(c);
            if c == '\n' {
                out.push_str(indent);
            }
        }
        out
    }
}
